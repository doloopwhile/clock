// Generated by CoffeeScript 1.6.1
(function() {
  var circle, get_hour_rgb, get_mid_rgb, hsv_to_rgb, style_from_rgb,
    _this = this;

  circle = function(context, x, y, radius) {
    return context.arc(x, y, radius, 0, 2 * Math.PI, false);
  };

  hsv_to_rgb = function(h, s, v) {
    var b, f, g, i, p, q, r, t;
    h = h % 1;
    if (h < 0) {
      h += 1;
    }
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;
      case 1:
        r = q;
        g = v;
        b = p;
        break;
      case 2:
        r = p;
        g = v;
        b = t;
        break;
      case 3:
        r = p;
        g = q;
        b = v;
        break;
      case 4:
        r = t;
        g = p;
        b = v;
        break;
      case 5:
        r = v;
        g = p;
        b = q;
    }
    return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
  };

  get_hour_rgb = function(hour) {
    var h, i, s, v;
    i = hour;
    h = (i % 12) / 12;
    s = v = 1;
    return hsv_to_rgb(h, s, v);
  };

  get_hour_rgb = function(hour) {
    var x;
    hour = hour % 24;
    if (hour < 0) {
      hour += 24;
    }
    if ((6 <= hour && hour <= 18)) {
      return hsv_to_rgb((18 - hour) / 12, 1, 1);
    } else {
      if (hour < 6) {
        x = hour / 6;
      } else {
        x = (24 - hour) / 6;
      }
      return hsv_to_rgb((6 - hour) / 12, x, x / 2);
    }
  };

  get_mid_rgb = function(rgb1, rgb2, r) {
    var i, _i, _len, _ref, _results;
    _ref = [0, 1, 2];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(Math.floor(rgb1[i] * (1 - r) + rgb2[i] * r));
    }
    return _results;
  };

  style_from_rgb = function(rgb) {
    return "rgb(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ")";
  };

  jQuery(function($) {
    var drawClock;
    drawClock = function() {
      var R, angle, canvas, context, get_background_style, get_center_style, height, hour, i, minute, now, radius, rgb, seconds, size, width, _i, _results;
      canvas = $('#clock').get(0);
      width = canvas.width = $(document).width();
      height = canvas.height = $(document).height();
      size = Math.min(width, height);
      R = size * 0.4;
      radius = R * Math.sin(Math.PI / 24);
      context = canvas.getContext('2d');
      now = new Date;
      hour = now.getHours();
      minute = now.getMinutes();
      seconds = now.getSeconds();
      get_background_style = function() {
        return style_from_rgb(get_mid_rgb(get_hour_rgb(hour), get_hour_rgb((hour + 1) % 24), minute / 60));
      };
      get_center_style = function() {
        var curr, next, prev;
        curr = seconds / 2.5;
        prev = Math.floor(curr);
        next = Math.ceil(curr);
        return style_from_rgb(get_mid_rgb(get_hour_rgb(prev), get_hour_rgb(next), curr - prev));
      };
      context.fillStyle = get_background_style();
      context.fillRect(0, 0, width, height);
      context.fillStyle = get_center_style();
      context.beginPath();
      circle(context, width / 2, height / 2, R);
      context.fill();
      _results = [];
      for (i = _i = 0; _i < 24; i = ++_i) {
        rgb = get_hour_rgb(i % 24);
        angle = Math.PI * i / 12;
        context.fillStyle = "rgb(" + rgb[0] + ", " + rgb[1] + ", " + rgb[2] + ")";
        context.save();
        context.translate(width / 2, height / 2);
        context.rotate(angle);
        context.translate(0, -R);
        context.beginPath();
        circle(context, 0, 0, radius);
        context.fill();
        _results.push(context.restore());
      }
      return _results;
    };
    return setInterval(drawClock, 250);
  });

}).call(this);
