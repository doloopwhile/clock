// Generated by CoffeeScript 1.6.1
(function() {
  var circle, get_hour_rgb, get_mid_rgb, hsv_to_rgb, mid_point, style_from_rgb, _get_hour_rgb,
    _this = this;

  circle = function(context, x, y, radius) {
    return context.arc(x, y, radius, 0, 2 * Math.PI, false);
  };

  hsv_to_rgb = function(h, s, v) {
    var b, f, g, i, p, q, r, t;
    h = h % 1;
    if (h < 0) {
      h += 1;
    }
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);
    switch (i % 6) {
      case 0:
        r = v;
        g = t;
        b = p;
        break;
      case 1:
        r = q;
        g = v;
        b = p;
        break;
      case 2:
        r = p;
        g = v;
        b = t;
        break;
      case 3:
        r = p;
        g = q;
        b = v;
        break;
      case 4:
        r = t;
        g = p;
        b = v;
        break;
      case 5:
        r = v;
        g = p;
        b = q;
    }
    return [r, g, b];
  };

  mid_point = function(x, y, r) {
    return x * (1 - r) + y * r;
  };

  get_mid_rgb = function(rgb1, rgb2, r) {
    var i, _i, _len, _ref, _results;
    _ref = [0, 1, 2];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(rgb1[i] * (1 - r) + rgb2[i] * r);
    }
    return _results;
  };

  style_from_rgb = function(rgb) {
    var f;
    f = Math.floor;
    return "rgb(" + (f(255 * rgb[0])) + "," + (f(255 * rgb[1])) + "," + (f(255 * rgb[2])) + ")";
  };

  get_hour_rgb = function(hour) {
    var colors, i, next_color, next_hour, prev_color, prev_hour, r, rgb, _i, _ref, _ref1, _ref2, _ref3, _ref4;
    hour %= 24;
    rgb = function(ir, ig, ib) {
      return [ir / 255, ig / 255, ib / 255];
    };
    colors = [[0, rgb(32, 32, 32)], [3, rgb(44, 62, 80)], [7, rgb(52, 152, 219)], [9, rgb(46, 204, 113)], [12, rgb(236, 240, 241)], [16, rgb(241, 196, 15)], [18, rgb(231, 76, 60)]];
    if (hour < colors[0][0]) {
      hour += 24;
    }
    for (i = _i = 0, _ref = colors.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _ref1 = colors[i], prev_hour = _ref1[0], prev_color = _ref1[1];
      _ref2 = colors[(i + 1) % colors.length], next_hour = _ref2[0], next_color = _ref2[1];
      if ((prev_hour <= hour && hour < next_hour)) {
        r = (hour - prev_hour) / (next_hour - prev_hour);
        return get_mid_rgb(prev_color, next_color, r);
      }
    }
    _ref3 = colors[colors.length - 1], prev_hour = _ref3[0], prev_color = _ref3[1];
    _ref4 = colors[0], next_hour = _ref4[0], next_color = _ref4[1];
    next_hour += 24;
    r = (hour - prev_hour) / (next_hour - prev_hour);
    return get_mid_rgb(prev_color, next_color, r);
  };

  _get_hour_rgb = function(hour) {
    var rgb_hex, rgb_hex1, rgb_hex2;
    rgb_hex1 = [[22, 21, 26], [54, 50, 142], [149, 26, 107], [84, 27, 134], [1, 106, 184], [15, 92, 170], [110, 185, 43], [0, 155, 98], [0, 94, 102], [99, 181, 217], [255, 255, 255], [124, 132, 135], [212, 212, 214]];
    rgb_hex1.sort(function(a, b) {
      return (a[0] + a[1] + a[2]) - (b[0] + b[1] + b[2]);
    });
    rgb_hex2 = [[195, 153, 105], [255, 223, 1], [249, 190, 0], [208, 143, 8], [236, 108, 165], [231, 0, 18], [230, 53, 47], [241, 130, 0], [248, 196, 132], [129, 62, 46], [82, 60, 49]];
    rgb_hex2.sort(function(a, b) {
      return (b[0] + b[1] + b[2]) - (a[0] + a[1] + a[2]);
    });
    rgb_hex = rgb_hex1.concat(rgb_hex2)[hour % 24];
    return [rgb_hex[0] / 255, rgb_hex[1] / 255, rgb_hex[2] / 255];
  };

  _get_hour_rgb = function(hour) {
    var h, i, s, v;
    i = hour;
    h = (i % 24) / 24;
    s = 0.8;
    v = 0.8;
    return hsv_to_rgb(h, s, v);
  };

  jQuery(function($) {
    var bg_canvas, bg_hour, bg_minute, bheight, bwidth, canvas, col_count, drawClock, height, margin, redrawBgCanvas, row_count, width;
    canvas = $('#clock').get(0);
    width = canvas.width = $(document).width();
    height = canvas.height = $(document).height();
    row_count = 6;
    col_count = 8;
    margin = height / (row_count + 1) / (row_count + 3);
    bheight = height / (row_count + 1);
    bwidth = (width - margin * (col_count + 3)) / col_count;
    bg_hour = bg_minute = null;
    bg_canvas = $("<canvas></canvas>").attr({
      width: width,
      height: height
    }).get(0);
    redrawBgCanvas = function() {
      var b, col, context, g, hour, i, minute, now, r, row, v, _i, _ref, _results;
      context = bg_canvas.getContext('2d');
      now = new Date;
      hour = now.getHours();
      minute = now.getMinutes();
      now = new Date;
      _ref = get_mid_rgb(get_hour_rgb(hour), get_hour_rgb((hour + 1) % 24), minute / 60), r = _ref[0], g = _ref[1], b = _ref[2];
      v = (r + g + b) / 3;
      r = v / 2 + r / 3;
      g = v / 2 + g / 3;
      b = v / 2 + b / 3;
      context.fillStyle = style_from_rgb([r, g, b]);
      context.fillRect(0, 0, width, height);
      _results = [];
      for (i = _i = 0; _i < 24; i = ++_i) {
        if ((0 <= i && i < col_count)) {
          row = 0;
          col = i;
        } else if ((col_count <= i && i < 12)) {
          row = i - col_count + 1;
          col = col_count - 1;
        } else if ((12 <= i && i < 12 + col_count)) {
          row = row_count - 1;
          col = (col_count - 1) - (i - 12);
        } else {
          row = 24 - i;
          col = 0;
        }
        context.fillStyle = style_from_rgb(get_hour_rgb(i % 24));
        _results.push(context.fillRect(col * bwidth + (col + 2) * margin, row * bheight + (row + 2) * margin, bwidth, bheight));
      }
      return _results;
    };
    drawClock = function() {
      var context, curr, dx, dy, hour, minute, next, now, prev, s, seconds, x, y, _ref;
      context = canvas.getContext('2d');
      now = new Date;
      hour = now.getHours();
      minute = now.getMinutes();
      seconds = now.getSeconds() + now.getMilliseconds() / 1000;
      if ([hour, minute] !== [bg_hour, bg_minute]) {
        _ref = [hour, minute], bg_hour = _ref[0], bg_minute = _ref[1];
        redrawBgCanvas();
      }
      context.drawImage(bg_canvas, 0, 0);
      curr = seconds / 2.5;
      prev = Math.floor(curr);
      next = Math.ceil(curr);
      context.fillStyle = style_from_rgb(get_mid_rgb(get_hour_rgb(prev), get_hour_rgb(next), curr - prev));
      s = (seconds % 30) / 2.5;
      if ((0 <= s && s <= 1)) {
        dx = 0;
        dy = 0;
      } else if ((1 <= s && s <= 6)) {
        dx = (s - 1) / 5;
        dy = 0;
      } else if ((6 <= s && s <= 8)) {
        dx = 1;
        dy = 0;
      } else if ((8 <= s && s <= 11)) {
        dx = 1;
        dy = (s - 8) / 3;
      } else {
        dx = dy = 1;
      }
      if (seconds > 30) {
        dx = 1 - dx;
        dy = 1 - dy;
      }
      x = margin * 2 + (bwidth + margin) * mid_point(1, col_count - 2, dx);
      y = margin * 2 + (bheight + margin) * mid_point(1, row_count - 2, dy);
      return context.fillRect(x, y, bwidth, bheight);
    };
    return setInterval(drawClock, 50);
  });

}).call(this);
